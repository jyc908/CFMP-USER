"""
Django settings for cfmp project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-juz)%(1i+d0am6xr=i2he*e0%0e65$6fvatqycjp+2z_c@%bv$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'backend', 'backend:8000', '*']

ASGI_APPLICATION = 'config.asgi.application'  # 指定ASGI入口
# Application definition

# python3 manage.py migrate
MINIO_STORAGE_ENDPOINT = "47.94.167.198:9000" # Minio 服务器地址
MINIO_STORAGE_ACCESS_KEY = '80rhHcZMlWxc7V3kT4Rs'      # 替换为你的 Access Key
MINIO_STORAGE_SECRET_KEY = 'rKxfuJdaTwcjiu9YIsn3R4UCR9Q39Ft8ywK4LVCi'      # 替换为你的 Secret Key
MINIO_STORAGE_USE_HTTPS = False                   # 根据你的 Minio 配置调整
MINIO_STORAGE_MEDIA_BUCKET_NAME = 'cfmp'    # 存储媒体文件的 Bucket 名称
MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET = True     # 自动创建 Bucket
DEFAULT_FILE_STORAGE = 'minio_storage.storage.MinioMediaStorage'
INSTALLED_APPS = [
    'channels',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_filters',
    'django_apscheduler',
    'minio_storage',
    "rest_framework",
    #"product",
    #"root",
    "user",
    #"order",
#     python manage.py migrate --fake django_apscheduler zero
]# 指定媒体文件的URL前缀（相对路径）


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"  # 使用内存通道
    }
}
# 允许的HOST（替换为你的IP或域名）

#自己写自己的分页器,不要全局配置
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # 启用过滤
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'config.authentication.JWTAuthentication',  # JWT认证
    ],'DEFAULT_FILE_STORAGE':
        'minio_storage.storage.MinioStaticStorage',
    'EXCEPTION_HANDLER': 'config.exceptions.custom_exception_handler',
    'DEFAULT_THROTTLE_RATES': {
        'email': '1/minute',
    }
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '3306'),
        'NAME': os.environ.get('DB_NAME', 'cfmp_db'),
        'USER': os.environ.get('DB_USER', 'root'),
        'PASSWORD': os.environ.get('DB_PASSWORD', '123456'),
        # 为了安全，测试中不允许使用生产数据库
        'TEST': {
            'NAME': 'test_cfmp_db_1',# 明确指定测试数据库名
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_HOST = "smtp.qq.com"     # 服务器
EMAIL_PORT = 465                # 一般情况下都为25
EMAIL_HOST_USER = "3417934680@qq.com"     # 账号
EMAIL_HOST_PASSWORD = "wvqhwfbidkhydabf"     # （上面保存的授权码）
EMAIL_USE_SSL = True  # 启用 SSL 加密
EMAIL_USE_TLS = False  # 禁用 TLSr
EMAIL_FROM = "qq账号@qq.com"      # 邮箱来自
email_title = '邮箱激活'

