name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        python manage.py test

  build-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cfmp-user:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/cfmp-user:latest

  deploy-to-k8s:
    needs: build-docker-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        # 配置 kubectl 访问集群
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
        
        # 更新部署文件中的镜像标签
        sed -i "s|image: cfmp-user:latest|image: ${{ secrets.DOCKER_USERNAME }}/cfmp-user:${{ github.sha }}|g" k8s-deployment.yaml
        
        # 应用部署配置
        kubectl apply -f k8s-deployment.yaml
        
        # 等待部署完成
        kubectl rollout status deployment/cfmp-user --timeout=300s

  integration-test:
    needs: deploy-to-k8s
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run integration tests
      run: |
        # 等待服务启动
        sleep 60
        
        # 安装测试依赖
        pip install requests
        
        # 运行集成测试
        python test_microservices.py

    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully! Commit: ${{ github.sha }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed! Commit: ${{ github.sha }}"